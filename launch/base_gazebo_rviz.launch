<launch>
	<arg name="id_robot" default="robot" />
	
	<!-- GAZEBO arguments -->
	<arg name="paused" default="false" />
	<arg name="use_sim_time" default="true" />
	<arg name="gui" default="true" />
	<arg name="headless" default="false" />
	<arg name="debug" default="false" />
	<arg name="load_gripper" default="true" />

	<!--launch GAZEBO with own world configuration -->
	<include file="$(find gazebo_ros)/launch/empty_world.launch">
		<!-- <arg name="world_name" value="$(find robotics_assisted_tomography)/worlds/tomography.world"/> -->
		<arg name="debug" value="$(arg debug)" />
		<arg name="gui" value="$(arg gui)" />
		<arg name="paused" value="$(arg paused)" />
		<arg name="use_sim_time" value="$(arg use_sim_time)" />
		<arg name="headless" value="$(arg headless)" />
	</include>

	<group ns="$(arg id_robot)">

		<arg name="prefix" value="$(arg id_robot)_"/>


		<arg name="xacro_robot" default="summit_xls_std.urdf.xacro"/>
		<arg name="omni_drive" default="true" />
		<arg if="$(arg omni_drive)" name="ros_planar_move_plugin" value="true"/>
		<arg unless="$(arg omni_drive)" name="ros_planar_move_plugin" default="true"/>
		<arg name="launch_robot_localization" default="true" />

		<param name="robot_description" command="$(find xacro)/xacro '$(find summit_xl_description)/robots/$(arg xacro_robot)' prefix:=$(arg prefix) ros_planar_move_plugin:=$(arg ros_planar_move_plugin) omni_wheels:=$(arg omni_drive) --inorder"/>


		<!-- start summit_xl_control nodes -->
		<include ns="robotnik_base_control" file="$(find summit_xl_control)/launch/summit_xl_control.launch">
			<arg name="prefix" value="robot_"/>
			<arg name="sim" value="true"/>

			<arg if="$(arg omni_drive)" name="kinematics" value="omni"/>
			<arg unless="$(arg omni_drive)" name="kinematics" value="skid"/>

			<arg name="ros_planar_move_plugin" value="$(arg ros_planar_move_plugin)"/>
			<!-- <arg name="launch_robot_localization" value="$(arg launch_robot_localization)"/> -->
		</include>
		<node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-param robot_description -urdf -model base_test" />
		<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
		<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen">
			<remap from="/joint_states" to="joint_states" />
		</node>
	</group>

	<node name="rviz" pkg="rviz" type="rviz" required="true" args="-d $(find sim_test)/launch/config_summit.rviz"/>

</launch>
